//动态规划， 超时
class Solution {
    public int jump(int[] nums) {
        if (nums == null || nums.length == 0) return -1;
        int[] dp = new int[nums.length];
        dp[0] = 0;
        for (int i = 1; i < nums.length; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        for (int i = 1; i < nums.length; i++)
            for (int j = 0; j < i; j++) {
                if (dp[j] != Integer.MAX_VALUE && j + nums[j] >= i) {
                    dp[i] = Math.min(dp[i], dp[j] + 1);
                }
            }
        return dp[nums.length - 1];
    }
}

//bfs
class Solution {
    public int jump(int[] nums) {
        return BFS(nums, nums.length);
    }
    public int BFS(int[] nums, int n) {
        if(n<2) return 0;
        int level = 0, currentMax = 0, i = 0, nextMax = 0;
        
        while(currentMax - i + 1>0) {
            level++;
            for(;i<=currentMax;i++) {
                nextMax = Math.max(nextMax, nums[i] + i);
                if(nextMax >= n-1) return level;
             }
            currentMax = nextMax;
        }
        return 0;
    }
}

static class Graph {
    	private int v;
    	private ArrayList[] adj;
       	Graph(int v) {
    		this.v = v;
    		adj = new ArrayList[v];
    		for (int i = 0; i < v; i++) {
    			adj[i] = new ArrayList<>();
    		}
    	}
    	void addEdge(int v, int w) {
    		adj[v].add(w);
    	}


       String findShortestPath(int s, int e) {
        	Int[] path = new int[v];
        	Arrays.fill(path, -1);
        	path[s] = 0;
            Queue<Integer> queue = new LinkedList<>();
            queue.offer(s);
            
            while(!queue.isEmpty()) {
             	int node = queue.poll();
             	ArrayList<Integer> tmp = adj[node];
             	for (int m : tmp) {          		
            		if (path[m] == -1) {
            			path[m] = node;
            			queue.offer(m);
            		}
             	}
            }
           
            if (path[e] == -1) return "";//两点间没有连通
            
            StringBuilder res = new StringBuilder();
            int i = e;
            while (i != s) {          	
             	res.append(i);
             	i = path[i];         	           	
            }            
            res.append(s);
        	return res.reverse().toString();
        }
